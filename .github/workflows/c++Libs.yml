name: c++ Libs

on:
  workflow_dispatch:
  push:
    paths: 
    - 'backend/c\+\+/libs/**'
    - '.github/workflows/c\+\+Libs.yml'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  Boost_Version_DOT: 1.74.0
  Boost_Version: 1_74_0
  CMAKE_INSTALL_PREFIX: ${{runner.workspace}}/build_output

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#configuring-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Cache
      uses: actions/cache@v2.1.1
      id: cache
      with:
        key: Boost-${{ env.Boost_Version }}
        path: |
          /usr/local/include
          /usr/local/lib
    
    - name: Boost Installed
      if: steps.cache.outputs.cache-hit == 'true'
      run: echo "DONE"
    
    - name: Create Boost build dir
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{runner.workspace}}
      run: mkdir -p boost
    
    - name: Download Boost
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{runner.workspace}}/boost
      shell: bash
      run: "([ -f boost_${{ env.Boost_Version }}.tar.gz ] && echo 'Skipped [done already]') || wget https://dl.bintray.com/boostorg/release/${{ env.Boost_Version_DOT }}/source/boost_${{ env.Boost_Version }}.tar.gz"
    
    - name: Extract Boost
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{runner.workspace}}/boost
      shell: bash
      run: "([ -d boost_${{ env.Boost_Version }} ] && echo 'Skipped [done already]') || tar xzvf boost_${{ env.Boost_Version }}.tar.gz"
      
    - name: Bootstrap Boost
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{runner.workspace}}/boost/boost_${{ env.Boost_Version }}
      shell: bash
      run: "([ -f b2 ] && echo 'Skipped [done already]') || ./bootstrap.sh"
      
    - name: Build Boost
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{runner.workspace}}/boost/boost_${{ env.Boost_Version }}
      shell: bash
      run: "([ -d stage ] && echo 'Skipped [done already]') || ./b2"
      
    - name: Install boost
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{runner.workspace}}/boost/boost_${{ env.Boost_Version }}
      shell: bash
      run: "([ -f /usr/local/lib/libboost_atomic.so.${{ env.Boost_Version_DOT }} ] && echo 'Skipped [done already]') || sudo ./b2 install"

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE/backend/c++/libs -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE --target all -- -j 2
      
    - name: Test
      working-directory: ${{runner.workspace}}/build
      env:
        BOOST_TEST_REPORT_LEVEL: detailed
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: Install
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target install -- -j 1

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        name: Build
        path: ${{runner.workspace}}/build_output
